import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import Game, ReplyKeyboardRemove

from keyboards.default.game_keyboard import game_start
from keyboards.inline.game_keyboard import game_key_word
from states.game_state import Game_State

all_city = ['–õ—å–≤–æ–≤', '–ö–∏–µ–≤', '–•–∞—Ä—å–∫–æ–≤', '–û–¥–µ—Å—Å–∞', '–î–Ω–µ–ø—Ä', '–ó–∞–ø–æ—Ä–æ–∂—å–µ', '–õ—É—Ü–∫', '–õ—É—Ü—å–∫', '–†–æ–≤–Ω–æ', '–¢–µ—Ä–Ω–æ–ø–æ–ª—å', '–•–º–µ–ª—å–Ω–∏—Ü–∫–∏–π', '–ß–µ—Ä–Ω–æ–≤—Ü—ã', '–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫',  '–£–∂–≥–æ—Ä–æ–¥', '–í–∏–Ω–Ω–∏—Ü–∞',
            '–ê–ª—É—à—Ç–∞', '–Ø–ª—Ç–∞']

copy_list_for_game = []

used_city = []


async def start_game(message: types.Message, state: FSMContext):
    await state.finish()
    await state.reset_state()
    global copy_list_for_game
    copy_list_for_game = all_city.copy()
    used_city.clear()
    await message.answer("üèô<b>–ü—Ä–∏–≤–µ—Ç, –ø–æ–∏–≥—Ä–∞–µ–º –≤ –≥–æ—Ä–æ–¥–∞?</b>", reply_markup=game_start)

    await Game_State.play_or_no.set()


async def start_play(message: types.Message, state: FSMContext):
    play_choice = message.text



    first_city_from_bot = random.choice(copy_list_for_game)

    copy_list_for_game.remove(first_city_from_bot)
    used_city.append(first_city_from_bot)

    if play_choice == "üéÆ–î–∞, –∏–≥—Ä–∞–µ–º":
        await message.answer("–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º!", reply_markup=ReplyKeyboardRemove())
        await message.answer(f'''–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º!
–Ø –≤—ã–±–∏—Ä–∞—é –≥–æ—Ä–æ–¥:  {first_city_from_bot}. –¢–≤–æ–π –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É {first_city_from_bot[-1]}
''',reply_markup=await game_key_word(first_city_from_bot))


async def next_city(callback_data: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    city_from_bot = callback_data.data.split('_')[-1]

    await callback_data.message.answer(f'''–¢–≤–æ–π –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É {city_from_bot[-1]}
–ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å: ''', reply_markup=ReplyKeyboardRemove())

    await state.update_data(city_from_bot=city_from_bot)
    await Game_State.play.set()



async def regular_play(message: types.Message, state: FSMContext):
    city_from_user = message.text

    data = await state.get_data()

    city_from_bot = data.get('city_from_bot')

    print('–ì–æ—Ä–æ–¥ –æ—Ç —é–∑–µ—Ä–∞ - ', city_from_user)
    print('–ì–æ—Ä–æ–¥ –æ—Ç –±–æ—Ç–∞ - ', city_from_bot)

    if city_from_user in copy_list_for_game and city_from_user not in used_city:
        if city_from_user[0].lower() == city_from_bot[-1].lower():
            await message.answer(f"{city_from_user} - –≤–∞—à –≥–æ—Ä–æ–¥")
            copy_list_for_game.remove(city_from_user)
            used_city.append(city_from_user)
            city_from_bot = [city for city in copy_list_for_game if city.startswith(city_from_user[-1].upper())]

            if city_from_bot:
                bot_choice = city_from_bot[0]
                await message.answer(f"–ú–æ–π –≥–æ—Ä–æ–¥ - {bot_choice}. –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É {bot_choice[-1]}", reply_markup= await game_key_word(bot_choice))
                copy_list_for_game.remove(bot_choice)
                used_city.append(bot_choice)
            else:
                await message.answer("–Ø –Ω–µ –∑–Ω–∞—é –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É. –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
    else:
        await message.answer('''–ì–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start –µ—Å–ª–∏ –ø–æ–ø–∞–ª –≤ —Ç—É–ø–∏–∫!''')
